apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api
  name: api
  namespace: default
spec:
  replicas: {{ .Values.api.replicas }}
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      initContainers:
        # Wait for s3/db services to be up, otherwise the api service fails to connect to it.
        # This is a workaround for the issue where the api service fails to connect to the task service
        # when the task service is not up yet.
        # Or simply restart the container until the task service is up.
        - name: wait-for-s3
          image: busybox
          command: ['sh', '-c', 'sleep 30; nslookup s3; until nc -z s3 9000; do echo waiting for s3...; sleep 15; done']
        - name: wait-for-db
          image: busybox
          command: ['sh', '-c', 'sleep 30; nslookup db; until nc -z db 27017; do echo waiting for db...; sleep 15; done'] 
      containers:
        - name: api
          image: {{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}
          imagePullPolicy: {{ .Values.api.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.api.ports.containerPort }}
              protocol: {{ .Values.api.ports.protocol }}
              name: {{ .Values.api.ports.name }}
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 15
            periodSeconds: 20
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              memory: {{ .Values.containers.resources.requests.memory }}
              cpu: {{ .Values.containers.resources.requests.cpu }}
            limits:
              memory: {{ .Values.containers.resources.limits.memory }}
              cpu: {{ .Values.containers.resources.limits.cpu }}
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.env.MINIO_ACCESS_KEY.key }}
                  name: {{ .Values.env.MINIO_ACCESS_KEY.name }}
            - name: MINIO_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.env.MINIO_ENDPOINT.key }}
                  name: {{ .Values.env.MINIO_ENDPOINT.name }}
            - name: MINIO_PORT
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.env.MINIO_PORT.key }}
                  name: {{ .Values.env.MINIO_PORT.name }}
            - name: MINIO_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.env.MINIO_SECRET_KEY.key }}
                  name: {{ .Values.env.MINIO_SECRET_KEY.name }}
            - name: MINIO_USE_SSL
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.env.MINIO_USE_SSL.key }}
                  name: {{ .Values.env.MINIO_USE_SSL.name }}
            - name: MONGOMS_ARCH
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.env.MONGOMS_ARCH.key }}
                  name: {{ .Values.env.MONGOMS_ARCH.name }}
            - name: MONGO_URL
              valueFrom:
                configMapKeyRef:
                  key: {{ .Values.env.MONGO_URL.key }}
                  name: {{ .Values.env.MONGO_URL.name }}
            - name: SERVER_TYPE
              value: {{ .Values.env.SERVER_TYPE.value }}
      restartPolicy: {{ .Values.api.restartPolicy}}