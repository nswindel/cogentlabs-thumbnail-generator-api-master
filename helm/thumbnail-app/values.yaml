api:
  replicas: 2
  image:
    repository: thumbnail-api
    tag: latest
    pullPolicy: IfNotPresent
  ports:
    containerPort: 3000
    protocol: TCP
    name: http
  restartPolicy: Always

apiService:
  type: LoadBalancer
  ports:
    name: http
    port: 3000
    targetPort: 3000

apiServiceMonitor:
  matchLabels:
    app: api
  endpoints:
    port: http
    interval: 60s

roles:
  prometheus:
    name: prometheus-role
    namespace: default
    rules:
      apiGroups: ["monitoring.coreos.com"]
      resources: ["servicemonitors"]
      verbs: ["get", "list", "watch"]

rolebindings:
  prometheus:
    name: prometheus-rolebinding
    namespace: default
    subjects:
      kind: ServiceAccount
      name: prometheus-kube-prometheus-prometheus
      namespace: prometheus
    roleRef:
      kind: Role
      name: prometheus-role
      apiGroup: rbac.authorization.k8s.io

containers:
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
env:
  MINIO_ACCESS_KEY:
    key: MINIO_ACCESS_KEY
    name: local-env
  MINIO_ENDPOINT:
    key: MINIO_ENDPOINT
    name: local-env
  MINIO_PORT:
    key: MINIO_PORT
    name: local-env
  MINIO_SECRET_KEY:
    key: MINIO_SECRET_KEY
    name: local-env
  MINIO_USE_SSL:
    key: MINIO_USE_SSL
    name: local-env
  MONGOMS_ARCH:
    key: MONGOMS_ARCH
    name: local-env
  MONGO_URL:
    key: MONGO_URL
    name: local-env
  SERVER_TYPE:
    value: server
  SERVER_TYPE_WORKER:
    value: worker

task:
  replicas: 1
  image:
    repository: thumbnail-task
    tag: latest
    pullPolicy: IfNotPresent
  ports:
    containerPort: 3000
    protocol: TCP
    name: http
  restartPolicy: Always

taskService:
  ports:
    name: http
    port: 3000
    targetPort: 3000

s3Service:
  ports:
    name: http
    port: 9000
    targetPort: 9000
  selector:
    app: s3
